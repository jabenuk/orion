/**
 * @defgroup meta Library initialisation and management
 * @brief Meta functions related to using Orion
 * @details This module details all functions and members functions related to using Orion.
 * 
 */

/**
 * @defgroup window GLFW Windowing System Abstractions for Orion
 * @brief Functionality related to the Orion abstractions of the GLFW library
 * @details Using this abstracted window system is @b not @b required, but it is recommended so that oriTerminate() can automatically free your window(s) and terminate GLFW.
 * GLFW will be @b implicitly @b initialised on the first Orion-abstracted function call.
 * <br><br>
 * Any undocumented functions in this section are simply abstractions of GLFW functions. For documentation on those functions, see GLFW's window reference (linked below)
 * and look for the function of the same name (just replace @c ori with @c glfw in the function name).
 *
 * @sa <a href="https://www.glfw.org/docs/latest/group__window.html#ga7d9c8c62384b1e2821c4dc48952d2033">GLFW window reference</a>
 *
 * @todo The following functions are yet to be abstracted:
 *  - @c glfwSetWindowIcon()
 *  - @c glfwGetWindowMonitor()
 *  - @c glfwSetWindowMonitor()
 *
 * To use the windowing abstractions ('orionwin'), include @c <orionwin.h>. None of this system will be included otherwise, so the main namespace won't be polluted if you
 * want to manage windows in a different way.
 */

/**
 * @defgroup shaders Shader management, creation, and destruction.
 * @brief Functionality related to the management, creation, and destruction of OpenGL shaders and shader programs.
 * @details This module documents the use of shader-related functionality - creating, destroying, and using OpenGL shader programs.
 * 
 */