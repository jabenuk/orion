/**
 * @page shaderpresets Shader presets
 * 
 * When you build with the @c -DORION_BUILD_PRESETS=ON (which is ON by default anyway), Orion provides some preset shaders
 * for smaller projects where you don't want, or need, to write the shaders yourself.
 * 
 * Here is a list of shader preset types:
 *  - @subpage basicshaders - shaders with very generic transformation and colour blending options.
 * 
 */

/** 
 * @page basicshaders Basic shader preset
 * 
 * @section basicvertex Vertex shader
 * 
 * The basic vertex shader preset can be accessed with the macro @c ORION_VERTEX_SHADER_BASIC. The source code can be seen below:
 * @code{.c}
	#version 330 core

	// ORION_VERTEX_SHADER_BASIC

	// ---------------------
	// Orion Basic Resources
	//     Shader Presets
	//         Basic Vertex Shader
	// ---------------------

	struct Transform {
		mat4 mvp;									// model-view-projection matrix (multiplied in reverse)
	};

	layout (location = 0) in vec3 vertexPosIn;		// normalised position of the vertex
	layout (location = 1) in vec2 texCoordIn;		// texture coordinate for the vertex
	layout (location = 2) in vec4 vertexColourIn;	// colour value of the vertex

	out vec2 texCoord;								// texture coordinate
	out vec4 vertexColour;							// colour value

	uniform Transform transform;

	void main() {
		// Output data
		texCoord = texCoordIn;
		vertexColour = vertexColourIn;

		// Output position
		gl_Position = transform.mvp * vec4(vertexPosIn, 1.0);
	}
 * @endcode
 *
 * @subsection bvertattribs Vertex attributes
 * The following vertex attributes can be set when using the basic vertex shader:
 *  - location @c 0 - the normalised vertex position
 *  - location @c 1 - the texture coordinate of the vertex (only necessary when using certain blend modes in the @ref basicfragment "basic fragment shader")
 *  - location @c 2 - the colour value of the vertex (only necessary when using certain blend modes in the @ref basicfragment "basic fragment shader")
 *
 * @subsection bvertuniforms Uniforms
 * The following uniforms can be set when using the basic vertex shader:
 *  - @c transform.mvp - a 4x4 model-view-projection matrix
 * 
 * @section basicfragment Fragment shader
 * 
 * The basic fragment shader preset can be accessed with the macro @c ORION_FRAGMENT_SHADER_BASIC. The source code can be seen below:
 * @code{.c}
	#version 330 core

	// ORION_FRAGMENT_SHADER_BASIC

	// ---------------------
	// Orion Basic Resources
	//     Shader Presets
	//        Basic Fragment Shader
	// ---------------------

	struct Blend {
		sampler2D tex;								// texture
		vec4 colour;								// colour value of the overall geometry
		int mode;									// way to blend colours
	};

	out vec4 fragColour;							// final colour of the fragment

	in vec2 texCoord;								// texture coordinate
	in vec4 vertexColour;							// colour value of the vertex

	uniform Blend blend;

	void main() {
		// blend based on blend.mode
		// 1 = solid colour only
		// 2 = texture only
		// 3 = gradient (vertex colours) only
		// 4 = solid colour and texture
		// 5 = solid colour and gradient
		// 6 = texture and gradient
		// 7 = all colour sources
		switch (blend.mode) {
			case 1:
				fragColour = blend.colour;
				break;
			case 2:
				fragColour = texture(blend.tex, texCoord);
				break;
			case 3:
				fragColour = vertexColour;
				break;
			case 4:
				fragColour = blend.colour * texture(blend.tex, texCoord);
				break;
			case 5:
				fragColour = blend.colour * vertexColour;
				break;
			case 6:
				fragColour = texture(blend.tex, texCoord) * vertexColour;
				break;
			case 7:
				fragColour = blend.colour * texture(blend.tex, texCoord) * vertexColour;
				break;
			default:
				fragColour = vec4(1, 0, 1, 1);	// magenta
		}
	}
 * @endcode
 * 
 * @subsection bfraguniforms Uniforms
 * The following uniforms can be set when using the basic fragment shader:
 *  - @c blend.mode - the type of blend mode to use. Available options are:
 * 		- @c 1: solid colour only
 * 		- @c 2: texture only
 * 		- @c 3: vertex colours only
 * 		- @c 4: solid colour and texture
 * 		- @c 5: solid colour and vertex colours
 * 		- @c 6: texture and vertex colours
 * 		- @c 7: all colour sources
 *  - @c blend.tex - the texture to use (used in blend modes 2, 4, 6, and 7).
 *  - @c blend.colour - a 4D vector of a solid RGBA colour (used in blend modes 1, 4, 5, and 7)
 */
